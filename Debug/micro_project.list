
micro_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036b4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003878  08003878  00013878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038e4  080038e4  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  080038e4  080038e4  000138e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038ec  080038ec  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038ec  080038ec  000138ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038f0  080038f0  000138f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080038f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000040  08003934  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08003934  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfb2  00000000  00000000  000200b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd9  00000000  00000000  0002d065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  0002ee40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008b1  00000000  00000000  0002f960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020fb3  00000000  00000000  00030211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f3a1  00000000  00000000  000511c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9b12  00000000  00000000  00060565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e6c  00000000  00000000  0012a078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0012cee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000040 	.word	0x20000040
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003860 	.word	0x08003860

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000044 	.word	0x20000044
 8000200:	08003860 	.word	0x08003860

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <lcd_send_cmd>:
//static void lcd_send_data(char);



void lcd_send_cmd (char cmd)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af02      	add	r7, sp, #8
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	f023 030f 	bic.w	r3, r3, #15
 8000510:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	f043 030c 	orr.w	r3, r3, #12
 800051e:	b2db      	uxtb	r3, r3
 8000520:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000522:	7bfb      	ldrb	r3, [r7, #15]
 8000524:	f043 0308 	orr.w	r3, r3, #8
 8000528:	b2db      	uxtb	r3, r3
 800052a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800052c:	7bbb      	ldrb	r3, [r7, #14]
 800052e:	f043 030c 	orr.w	r3, r3, #12
 8000532:	b2db      	uxtb	r3, r3
 8000534:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000536:	7bbb      	ldrb	r3, [r7, #14]
 8000538:	f043 0308 	orr.w	r3, r3, #8
 800053c:	b2db      	uxtb	r3, r3
 800053e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000540:	f107 0208 	add.w	r2, r7, #8
 8000544:	2364      	movs	r3, #100	; 0x64
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2304      	movs	r3, #4
 800054a:	214e      	movs	r1, #78	; 0x4e
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <lcd_send_cmd+0x5c>)
 800054e:	f001 fd55 	bl	8001ffc <HAL_I2C_Master_Transmit>
}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000084 	.word	0x20000084

08000560 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af02      	add	r7, sp, #8
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f023 030f 	bic.w	r3, r3, #15
 8000570:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	f043 030d 	orr.w	r3, r3, #13
 800057e:	b2db      	uxtb	r3, r3
 8000580:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	f043 0309 	orr.w	r3, r3, #9
 8000588:	b2db      	uxtb	r3, r3
 800058a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 800058c:	7bbb      	ldrb	r3, [r7, #14]
 800058e:	f043 030d 	orr.w	r3, r3, #13
 8000592:	b2db      	uxtb	r3, r3
 8000594:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	f043 0309 	orr.w	r3, r3, #9
 800059c:	b2db      	uxtb	r3, r3
 800059e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005a0:	f107 0208 	add.w	r2, r7, #8
 80005a4:	2364      	movs	r3, #100	; 0x64
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2304      	movs	r3, #4
 80005aa:	214e      	movs	r1, #78	; 0x4e
 80005ac:	4803      	ldr	r0, [pc, #12]	; (80005bc <lcd_send_data+0x5c>)
 80005ae:	f001 fd25 	bl	8001ffc <HAL_I2C_Master_Transmit>
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000084 	.word	0x20000084

080005c0 <lcd_init>:

void lcd_init (void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80005c4:	2032      	movs	r0, #50	; 0x32
 80005c6:	f000 fd8b 	bl	80010e0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005ca:	2030      	movs	r0, #48	; 0x30
 80005cc:	f7ff ff98 	bl	8000500 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80005d0:	2005      	movs	r0, #5
 80005d2:	f000 fd85 	bl	80010e0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005d6:	2030      	movs	r0, #48	; 0x30
 80005d8:	f7ff ff92 	bl	8000500 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 fd7f 	bl	80010e0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005e2:	2030      	movs	r0, #48	; 0x30
 80005e4:	f7ff ff8c 	bl	8000500 <lcd_send_cmd>
	HAL_Delay(10);
 80005e8:	200a      	movs	r0, #10
 80005ea:	f000 fd79 	bl	80010e0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80005ee:	2020      	movs	r0, #32
 80005f0:	f7ff ff86 	bl	8000500 <lcd_send_cmd>
	HAL_Delay(10);
 80005f4:	200a      	movs	r0, #10
 80005f6:	f000 fd73 	bl	80010e0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80005fa:	2028      	movs	r0, #40	; 0x28
 80005fc:	f7ff ff80 	bl	8000500 <lcd_send_cmd>
	HAL_Delay(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f000 fd6d 	bl	80010e0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000606:	2008      	movs	r0, #8
 8000608:	f7ff ff7a 	bl	8000500 <lcd_send_cmd>
	HAL_Delay(1);
 800060c:	2001      	movs	r0, #1
 800060e:	f000 fd67 	bl	80010e0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ff74 	bl	8000500 <lcd_send_cmd>
	HAL_Delay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fd61 	bl	80010e0 <HAL_Delay>
	HAL_Delay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 fd5e 	bl	80010e0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000624:	2006      	movs	r0, #6
 8000626:	f7ff ff6b 	bl	8000500 <lcd_send_cmd>
	HAL_Delay(1);
 800062a:	2001      	movs	r0, #1
 800062c:	f000 fd58 	bl	80010e0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000630:	200c      	movs	r0, #12
 8000632:	f7ff ff65 	bl	8000500 <lcd_send_cmd>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}

0800063a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000642:	e006      	b.n	8000652 <lcd_send_string+0x18>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	607a      	str	r2, [r7, #4]
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ff87 	bl	8000560 <lcd_send_data>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1f4      	bne.n	8000644 <lcd_send_string+0xa>
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	460a      	mov	r2, r1
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	4613      	mov	r3, r2
 8000672:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <lcd_set_cursor+0x1c>
 800067a:	2b01      	cmp	r3, #1
 800067c:	d003      	beq.n	8000686 <lcd_set_cursor+0x22>
 800067e:	e005      	b.n	800068c <lcd_set_cursor+0x28>
        case 0:
            address = 0x00;
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]
            break;
 8000684:	e004      	b.n	8000690 <lcd_set_cursor+0x2c>
        case 1:
            address = 0x40;
 8000686:	2340      	movs	r3, #64	; 0x40
 8000688:	73fb      	strb	r3, [r7, #15]
            break;
 800068a:	e001      	b.n	8000690 <lcd_set_cursor+0x2c>
        default:
            address = 0x00;
 800068c:	2300      	movs	r3, #0
 800068e:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 8000690:	7bfa      	ldrb	r2, [r7, #15]
 8000692:	79bb      	ldrb	r3, [r7, #6]
 8000694:	4413      	add	r3, r2
 8000696:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff2d 	bl	8000500 <lcd_send_cmd>
}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <lcd_clear>:

void lcd_clear(void) {
 80006ae:	b580      	push	{r7, lr}
 80006b0:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80006b2:	2001      	movs	r0, #1
 80006b4:	f7ff ff24 	bl	8000500 <lcd_send_cmd>
    HAL_Delay(2);
 80006b8:	2002      	movs	r0, #2
 80006ba:	f000 fd11 	bl	80010e0 <HAL_Delay>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <HAL_GPIO_EXTI_Callback>:
char ch[50]="welcome !";
char s[50];
int sw=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)

{
 80006c4:	b5b0      	push	{r4, r5, r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin ==butt_Pin )
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	2b80      	cmp	r3, #128	; 0x80
 80006d2:	d159      	bne.n	8000788 <HAL_GPIO_EXTI_Callback+0xc4>

	{
		  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin); // for detect data receive
 80006d4:	2120      	movs	r1, #32
 80006d6:	482e      	ldr	r0, [pc, #184]	; (8000790 <HAL_GPIO_EXTI_Callback+0xcc>)
 80006d8:	f001 fb19 	bl	8001d0e <HAL_GPIO_TogglePin>
		  sw++;
 80006dc:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <HAL_GPIO_EXTI_Callback+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4a2c      	ldr	r2, [pc, #176]	; (8000794 <HAL_GPIO_EXTI_Callback+0xd0>)
 80006e4:	6013      	str	r3, [r2, #0]
		  if(sw>3)sw=0;
 80006e6:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <HAL_GPIO_EXTI_Callback+0xd0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	dd02      	ble.n	80006f4 <HAL_GPIO_EXTI_Callback+0x30>
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <HAL_GPIO_EXTI_Callback+0xd0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
		  switch(sw){
 80006f4:	4b27      	ldr	r3, [pc, #156]	; (8000794 <HAL_GPIO_EXTI_Callback+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	d845      	bhi.n	8000788 <HAL_GPIO_EXTI_Callback+0xc4>
 80006fc:	a201      	add	r2, pc, #4	; (adr r2, 8000704 <HAL_GPIO_EXTI_Callback+0x40>)
 80006fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000702:	bf00      	nop
 8000704:	08000733 	.word	0x08000733
 8000708:	08000715 	.word	0x08000715
 800070c:	0800074f 	.word	0x0800074f
 8000710:	0800076d 	.word	0x0800076d
		  case 1:
			  strcpy(ch, "UART=>CAN");
 8000714:	4b20      	ldr	r3, [pc, #128]	; (8000798 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <HAL_GPIO_EXTI_Callback+0xd8>)
 8000718:	ca07      	ldmia	r2, {r0, r1, r2}
 800071a:	c303      	stmia	r3!, {r0, r1}
 800071c:	801a      	strh	r2, [r3, #0]
			  strcpy(s, "RX:PC5-TX:PC10");
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000722:	4614      	mov	r4, r2
 8000724:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000726:	c407      	stmia	r4!, {r0, r1, r2}
 8000728:	8023      	strh	r3, [r4, #0]
 800072a:	3402      	adds	r4, #2
 800072c:	0c1b      	lsrs	r3, r3, #16
 800072e:	7023      	strb	r3, [r4, #0]
			  break;
 8000730:	e02a      	b.n	8000788 <HAL_GPIO_EXTI_Callback+0xc4>
		  case 0:
			  strcpy(ch, "I2C=>CAN");
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000734:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000736:	ca07      	ldmia	r2, {r0, r1, r2}
 8000738:	c303      	stmia	r3!, {r0, r1}
 800073a:	701a      	strb	r2, [r3, #0]
			  strcpy(s, "SDA:PB3-SCL:PB10");
 800073c:	4a18      	ldr	r2, [pc, #96]	; (80007a0 <HAL_GPIO_EXTI_Callback+0xdc>)
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <HAL_GPIO_EXTI_Callback+0xe8>)
 8000740:	4614      	mov	r4, r2
 8000742:	461d      	mov	r5, r3
 8000744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000748:	682b      	ldr	r3, [r5, #0]
 800074a:	7023      	strb	r3, [r4, #0]
		  			  break;
 800074c:	e01c      	b.n	8000788 <HAL_GPIO_EXTI_Callback+0xc4>
		  case 2:
			  strcpy(ch, "UART<=CAN");
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000750:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <HAL_GPIO_EXTI_Callback+0xec>)
 8000752:	ca07      	ldmia	r2, {r0, r1, r2}
 8000754:	c303      	stmia	r3!, {r0, r1}
 8000756:	801a      	strh	r2, [r3, #0]
			  			  strcpy(s, "RX:PC5-TX:PC10");
 8000758:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <HAL_GPIO_EXTI_Callback+0xdc>)
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800075c:	4614      	mov	r4, r2
 800075e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000760:	c407      	stmia	r4!, {r0, r1, r2}
 8000762:	8023      	strh	r3, [r4, #0]
 8000764:	3402      	adds	r4, #2
 8000766:	0c1b      	lsrs	r3, r3, #16
 8000768:	7023      	strb	r3, [r4, #0]
			  			  break;
 800076a:	e00d      	b.n	8000788 <HAL_GPIO_EXTI_Callback+0xc4>
		  case 3:
		  			  strcpy(ch, "I2C<=CAN");
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_GPIO_EXTI_Callback+0xd4>)
 800076e:	4a11      	ldr	r2, [pc, #68]	; (80007b4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000770:	ca07      	ldmia	r2, {r0, r1, r2}
 8000772:	c303      	stmia	r3!, {r0, r1}
 8000774:	701a      	strb	r2, [r3, #0]
		  			  strcpy(s, "SDA:PB3-SCL:PB10");
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <HAL_GPIO_EXTI_Callback+0xe8>)
 800077a:	4614      	mov	r4, r2
 800077c:	461d      	mov	r5, r3
 800077e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000782:	682b      	ldr	r3, [r5, #0]
 8000784:	7023      	strb	r3, [r4, #0]
		  		  			  break;
 8000786:	bf00      	nop
		  }
		 // HAL_Delay(1);
	}

}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bdb0      	pop	{r4, r5, r7, pc}
 8000790:	40020000 	.word	0x40020000
 8000794:	200001f0 	.word	0x200001f0
 8000798:	20000000 	.word	0x20000000
 800079c:	08003878 	.word	0x08003878
 80007a0:	200001bc 	.word	0x200001bc
 80007a4:	08003884 	.word	0x08003884
 80007a8:	08003894 	.word	0x08003894
 80007ac:	080038a0 	.word	0x080038a0
 80007b0:	080038b4 	.word	0x080038b4
 80007b4:	080038c0 	.word	0x080038c0

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007bc:	f000 fc1e 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c0:	f000 f834 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c4:	f000 f984 	bl	8000ad0 <MX_GPIO_Init>
  MX_CAN1_Init();
 80007c8:	f000 f89c 	bl	8000904 <MX_CAN1_Init>
  MX_I2C1_Init();
 80007cc:	f000 f8d0 	bl	8000970 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80007d0:	f000 f92a 	bl	8000a28 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80007d4:	f000 f8fa 	bl	80009cc <MX_I2C2_Init>
  MX_USART3_UART_Init();
 80007d8:	f000 f950 	bl	8000a7c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80007dc:	f7ff fef0 	bl	80005c0 <lcd_init>
  // char ch[]="hello world";
  lcd_set_cursor(0,2);
 80007e0:	2102      	movs	r1, #2
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff ff3e 	bl	8000664 <lcd_set_cursor>
  lcd_send_string(ch);
 80007e8:	480e      	ldr	r0, [pc, #56]	; (8000824 <main+0x6c>)
 80007ea:	f7ff ff26 	bl	800063a <lcd_send_string>
  HAL_Delay(2000);
 80007ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007f2:	f000 fc75 	bl	80010e0 <HAL_Delay>
  lcd_clear();
 80007f6:	f7ff ff5a 	bl	80006ae <lcd_clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lcd_set_cursor(0,0);
 80007fa:	2100      	movs	r1, #0
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff ff31 	bl	8000664 <lcd_set_cursor>
	  lcd_send_string(ch);
 8000802:	4808      	ldr	r0, [pc, #32]	; (8000824 <main+0x6c>)
 8000804:	f7ff ff19 	bl	800063a <lcd_send_string>
	  lcd_set_cursor(1,0);
 8000808:	2100      	movs	r1, #0
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff ff2a 	bl	8000664 <lcd_set_cursor>
	  lcd_send_string(s);
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <main+0x70>)
 8000812:	f7ff ff12 	bl	800063a <lcd_send_string>
	  HAL_Delay(200);
 8000816:	20c8      	movs	r0, #200	; 0xc8
 8000818:	f000 fc62 	bl	80010e0 <HAL_Delay>
	  lcd_clear();
 800081c:	f7ff ff47 	bl	80006ae <lcd_clear>
	  lcd_set_cursor(0,0);
 8000820:	e7eb      	b.n	80007fa <main+0x42>
 8000822:	bf00      	nop
 8000824:	20000000 	.word	0x20000000
 8000828:	200001bc 	.word	0x200001bc

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b094      	sub	sp, #80	; 0x50
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2234      	movs	r2, #52	; 0x34
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f002 ffe4 	bl	8003808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	4b29      	ldr	r3, [pc, #164]	; (80008fc <SystemClock_Config+0xd0>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	4a28      	ldr	r2, [pc, #160]	; (80008fc <SystemClock_Config+0xd0>)
 800085a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	4b26      	ldr	r3, [pc, #152]	; (80008fc <SystemClock_Config+0xd0>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800086c:	2300      	movs	r3, #0
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <SystemClock_Config+0xd4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000878:	4a21      	ldr	r2, [pc, #132]	; (8000900 <SystemClock_Config+0xd4>)
 800087a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <SystemClock_Config+0xd4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088c:	2302      	movs	r3, #2
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000894:	2310      	movs	r3, #16
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000898:	2302      	movs	r3, #2
 800089a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800089c:	2300      	movs	r3, #0
 800089e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008a0:	2308      	movs	r3, #8
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008a4:	2348      	movs	r3, #72	; 0x48
 80008a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 fa43 	bl	8002d44 <HAL_RCC_OscConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008c4:	f000 f990 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c8:	230f      	movs	r3, #15
 80008ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008cc:	2302      	movs	r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2102      	movs	r1, #2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fee3 	bl	80026b0 <HAL_RCC_ClockConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80008f0:	f000 f97a 	bl	8000be8 <Error_Handler>
  }
}
 80008f4:	bf00      	nop
 80008f6:	3750      	adds	r7, #80	; 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000

08000904 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_CAN1_Init+0x64>)
 800090a:	4a18      	ldr	r2, [pc, #96]	; (800096c <MX_CAN1_Init+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_CAN1_Init+0x64>)
 8000910:	2209      	movs	r2, #9
 8000912:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_CAN1_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_CAN1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_CAN1_Init+0x64>)
 8000922:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000926:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_CAN1_Init+0x64>)
 800092a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800092e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000930:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <MX_CAN1_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_CAN1_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_CAN1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_CAN1_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <MX_CAN1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_CAN1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_CAN1_Init+0x64>)
 8000956:	f000 fbe7 	bl	8001128 <HAL_CAN_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000960:	f000 f942 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000005c 	.word	0x2000005c
 800096c:	40006400 	.word	0x40006400

08000970 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_I2C1_Init+0x50>)
 8000976:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <MX_I2C1_Init+0x54>)
 8000978:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_I2C1_Init+0x50>)
 800097c:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <MX_I2C1_Init+0x58>)
 800097e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_I2C1_Init+0x50>)
 800098e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000992:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <MX_I2C1_Init+0x50>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_I2C1_Init+0x50>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <MX_I2C1_Init+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_I2C1_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_I2C1_Init+0x50>)
 80009ae:	f001 f9e1 	bl	8001d74 <HAL_I2C_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009b8:	f000 f916 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000084 	.word	0x20000084
 80009c4:	40005400 	.word	0x40005400
 80009c8:	000186a0 	.word	0x000186a0

080009cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_I2C2_Init+0x50>)
 80009d2:	4a13      	ldr	r2, [pc, #76]	; (8000a20 <MX_I2C2_Init+0x54>)
 80009d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_I2C2_Init+0x50>)
 80009d8:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_I2C2_Init+0x58>)
 80009da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_I2C2_Init+0x50>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_I2C2_Init+0x50>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_I2C2_Init+0x50>)
 80009ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <MX_I2C2_Init+0x50>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_I2C2_Init+0x50>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <MX_I2C2_Init+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_I2C2_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_I2C2_Init+0x50>)
 8000a0a:	f001 f9b3 	bl	8001d74 <HAL_I2C_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a14:	f000 f8e8 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000d8 	.word	0x200000d8
 8000a20:	40005800 	.word	0x40005800
 8000a24:	000186a0 	.word	0x000186a0

08000a28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <MX_USART2_UART_Init+0x50>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a60:	f002 fc0e 	bl	8003280 <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a6a:	f000 f8bd 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000012c 	.word	0x2000012c
 8000a78:	40004400 	.word	0x40004400

08000a7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <MX_USART3_UART_Init+0x50>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000ab4:	f002 fbe4 	bl	8003280 <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000abe:	f000 f893 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000174 	.word	0x20000174
 8000acc:	40004800 	.word	0x40004800

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b3c      	ldr	r3, [pc, #240]	; (8000bdc <MX_GPIO_Init+0x10c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a3b      	ldr	r2, [pc, #236]	; (8000bdc <MX_GPIO_Init+0x10c>)
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b39      	ldr	r3, [pc, #228]	; (8000bdc <MX_GPIO_Init+0x10c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <MX_GPIO_Init+0x10c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a34      	ldr	r2, [pc, #208]	; (8000bdc <MX_GPIO_Init+0x10c>)
 8000b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <MX_GPIO_Init+0x10c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <MX_GPIO_Init+0x10c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a2d      	ldr	r2, [pc, #180]	; (8000bdc <MX_GPIO_Init+0x10c>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <MX_GPIO_Init+0x10c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <MX_GPIO_Init+0x10c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a26      	ldr	r2, [pc, #152]	; (8000bdc <MX_GPIO_Init+0x10c>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <MX_GPIO_Init+0x10c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2120      	movs	r1, #32
 8000b5a:	4821      	ldr	r0, [pc, #132]	; (8000be0 <MX_GPIO_Init+0x110>)
 8000b5c:	f001 f8be 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	481b      	ldr	r0, [pc, #108]	; (8000be4 <MX_GPIO_Init+0x114>)
 8000b78:	f000 ff1c 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000b7c:	2320      	movs	r3, #32
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4813      	ldr	r0, [pc, #76]	; (8000be0 <MX_GPIO_Init+0x110>)
 8000b94:	f000 ff0e 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : butt_Pin */
  GPIO_InitStruct.Pin = butt_Pin;
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(butt_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <MX_GPIO_Init+0x114>)
 8000bae:	f000 ff01 	bl	80019b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2017      	movs	r0, #23
 8000bb8:	f000 fec5 	bl	8001946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bbc:	2017      	movs	r0, #23
 8000bbe:	f000 fede 	bl	800197e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2028      	movs	r0, #40	; 0x28
 8000bc8:	f000 febd 	bl	8001946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bcc:	2028      	movs	r0, #40	; 0x28
 8000bce:	f000 fed6 	bl	800197e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40020800 	.word	0x40020800

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <Error_Handler+0x8>
	...

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_MspInit+0x5c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <HAL_MspInit+0x5c>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_MspInit+0x5c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_MspInit+0x5c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a0c      	ldr	r2, [pc, #48]	; (8000c50 <HAL_MspInit+0x5c>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_MspInit+0x5c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c32:	2007      	movs	r0, #7
 8000c34:	f000 fe7c 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2005      	movs	r0, #5
 8000c3e:	f000 fe82 	bl	8001946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000c42:	2005      	movs	r0, #5
 8000c44:	f000 fe9b 	bl	800197e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a1d      	ldr	r2, [pc, #116]	; (8000ce8 <HAL_CAN_MspInit+0x94>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d134      	bne.n	8000ce0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <HAL_CAN_MspInit+0x98>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	4a1b      	ldr	r2, [pc, #108]	; (8000cec <HAL_CAN_MspInit+0x98>)
 8000c80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c84:	6413      	str	r3, [r2, #64]	; 0x40
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_CAN_MspInit+0x98>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_CAN_MspInit+0x98>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a14      	ldr	r2, [pc, #80]	; (8000cec <HAL_CAN_MspInit+0x98>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_CAN_MspInit+0x98>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cc0:	2309      	movs	r3, #9
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <HAL_CAN_MspInit+0x9c>)
 8000ccc:	f000 fe72 	bl	80019b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2014      	movs	r0, #20
 8000cd6:	f000 fe36 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cda:	2014      	movs	r0, #20
 8000cdc:	f000 fe4f 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	; 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40006400 	.word	0x40006400
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a33      	ldr	r2, [pc, #204]	; (8000de0 <HAL_I2C_MspInit+0xec>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12d      	bne.n	8000d72 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
 8000d1a:	4b32      	ldr	r3, [pc, #200]	; (8000de4 <HAL_I2C_MspInit+0xf0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a31      	ldr	r2, [pc, #196]	; (8000de4 <HAL_I2C_MspInit+0xf0>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <HAL_I2C_MspInit+0xf0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
 8000d30:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d38:	2312      	movs	r3, #18
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d44:	2304      	movs	r3, #4
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4826      	ldr	r0, [pc, #152]	; (8000de8 <HAL_I2C_MspInit+0xf4>)
 8000d50:	f000 fe30 	bl	80019b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <HAL_I2C_MspInit+0xf0>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	4a21      	ldr	r2, [pc, #132]	; (8000de4 <HAL_I2C_MspInit+0xf0>)
 8000d5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d62:	6413      	str	r3, [r2, #64]	; 0x40
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <HAL_I2C_MspInit+0xf0>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d70:	e031      	b.n	8000dd6 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a1d      	ldr	r2, [pc, #116]	; (8000dec <HAL_I2C_MspInit+0xf8>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d12c      	bne.n	8000dd6 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_I2C_MspInit+0xf0>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <HAL_I2C_MspInit+0xf0>)
 8000d86:	f043 0302 	orr.w	r3, r3, #2
 8000d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_I2C_MspInit+0xf0>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8000d98:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9e:	2312      	movs	r3, #18
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000daa:	2304      	movs	r3, #4
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <HAL_I2C_MspInit+0xf4>)
 8000db6:	f000 fdfd 	bl	80019b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_I2C_MspInit+0xf0>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_I2C_MspInit+0xf0>)
 8000dc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_I2C_MspInit+0xf0>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
}
 8000dd6:	bf00      	nop
 8000dd8:	3730      	adds	r7, #48	; 0x30
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40005400 	.word	0x40005400
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020400 	.word	0x40020400
 8000dec:	40005800 	.word	0x40005800

08000df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a32      	ldr	r2, [pc, #200]	; (8000ed8 <HAL_UART_MspInit+0xe8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d12c      	bne.n	8000e6c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
 8000e16:	4b31      	ldr	r3, [pc, #196]	; (8000edc <HAL_UART_MspInit+0xec>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a30      	ldr	r2, [pc, #192]	; (8000edc <HAL_UART_MspInit+0xec>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <HAL_UART_MspInit+0xec>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	61bb      	str	r3, [r7, #24]
 8000e2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <HAL_UART_MspInit+0xec>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a29      	ldr	r2, [pc, #164]	; (8000edc <HAL_UART_MspInit+0xec>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b27      	ldr	r3, [pc, #156]	; (8000edc <HAL_UART_MspInit+0xec>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	481e      	ldr	r0, [pc, #120]	; (8000ee0 <HAL_UART_MspInit+0xf0>)
 8000e66:	f000 fda5 	bl	80019b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e6a:	e031      	b.n	8000ed0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <HAL_UART_MspInit+0xf4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d12c      	bne.n	8000ed0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_UART_MspInit+0xec>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a17      	ldr	r2, [pc, #92]	; (8000edc <HAL_UART_MspInit+0xec>)
 8000e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_UART_MspInit+0xec>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <HAL_UART_MspInit+0xec>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a10      	ldr	r2, [pc, #64]	; (8000edc <HAL_UART_MspInit+0xec>)
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_UART_MspInit+0xec>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8000eae:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <HAL_UART_MspInit+0xf8>)
 8000ecc:	f000 fd72 	bl	80019b4 <HAL_GPIO_Init>
}
 8000ed0:	bf00      	nop
 8000ed2:	3730      	adds	r7, #48	; 0x30
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40004400 	.word	0x40004400
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	40004800 	.word	0x40004800
 8000ee8:	40020800 	.word	0x40020800

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <MemManage_Handler+0x4>

08000efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f38:	f000 f8b2 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <CAN1_RX0_IRQHandler+0x10>)
 8000f56:	f000 f9e2 	bl	800131e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000005c 	.word	0x2000005c

08000f64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(butt_Pin);
 8000f68:	2080      	movs	r0, #128	; 0x80
 8000f6a:	f000 feeb 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000f76:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f7a:	f000 fee3 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fac:	f7ff ffea 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	; (8000ff4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f002 fc1f 	bl	8003818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fda:	f7ff fbed 	bl	80007b8 <main>
  bx  lr    
 8000fde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000fec:	080038f4 	.word	0x080038f4
  ldr r2, =_sbss
 8000ff0:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000ff4:	200001f8 	.word	0x200001f8

08000ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <HAL_Init+0x40>)
 8001006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_Init+0x40>)
 8001012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_Init+0x40>)
 800101e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001024:	2003      	movs	r0, #3
 8001026:	f000 fc83 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102a:	2000      	movs	r0, #0
 800102c:	f000 f808 	bl	8001040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001030:	f7ff fde0 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023c00 	.word	0x40023c00

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_InitTick+0x54>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_InitTick+0x58>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	fbb3 f3f1 	udiv	r3, r3, r1
 800105a:	fbb2 f3f3 	udiv	r3, r2, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fc9b 	bl	800199a <HAL_SYSTICK_Config>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e00e      	b.n	800108c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b0f      	cmp	r3, #15
 8001072:	d80a      	bhi.n	800108a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001074:	2200      	movs	r2, #0
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f000 fc63 	bl	8001946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001080:	4a06      	ldr	r2, [pc, #24]	; (800109c <HAL_InitTick+0x5c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000034 	.word	0x20000034
 8001098:	2000003c 	.word	0x2000003c
 800109c:	20000038 	.word	0x20000038

080010a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	2000003c 	.word	0x2000003c
 80010c4:	200001f4 	.word	0x200001f4

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	200001f4 	.word	0x200001f4

080010e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff ffee 	bl	80010c8 <HAL_GetTick>
 80010ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d005      	beq.n	8001106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_Delay+0x44>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4413      	add	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001106:	bf00      	nop
 8001108:	f7ff ffde 	bl	80010c8 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8f7      	bhi.n	8001108 <HAL_Delay+0x28>
  {
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000003c 	.word	0x2000003c

08001128 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e0ed      	b.n	8001316 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fd84 	bl	8000c54 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0201 	orr.w	r2, r2, #1
 800115a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800115c:	f7ff ffb4 	bl	80010c8 <HAL_GetTick>
 8001160:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001162:	e012      	b.n	800118a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001164:	f7ff ffb0 	bl	80010c8 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b0a      	cmp	r3, #10
 8001170:	d90b      	bls.n	800118a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2205      	movs	r2, #5
 8001182:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e0c5      	b.n	8001316 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0e5      	beq.n	8001164 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0202 	bic.w	r2, r2, #2
 80011a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011a8:	f7ff ff8e 	bl	80010c8 <HAL_GetTick>
 80011ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ae:	e012      	b.n	80011d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011b0:	f7ff ff8a 	bl	80010c8 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b0a      	cmp	r3, #10
 80011bc:	d90b      	bls.n	80011d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2205      	movs	r2, #5
 80011ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e09f      	b.n	8001316 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1e5      	bne.n	80011b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	7e1b      	ldrb	r3, [r3, #24]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d108      	bne.n	80011fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e007      	b.n	800120e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800120c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7e5b      	ldrb	r3, [r3, #25]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d108      	bne.n	8001228 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	e007      	b.n	8001238 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001236:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7e9b      	ldrb	r3, [r3, #26]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d108      	bne.n	8001252 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0220 	orr.w	r2, r2, #32
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	e007      	b.n	8001262 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0220 	bic.w	r2, r2, #32
 8001260:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7edb      	ldrb	r3, [r3, #27]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d108      	bne.n	800127c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0210 	bic.w	r2, r2, #16
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	e007      	b.n	800128c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 0210 	orr.w	r2, r2, #16
 800128a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7f1b      	ldrb	r3, [r3, #28]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d108      	bne.n	80012a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0208 	orr.w	r2, r2, #8
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	e007      	b.n	80012b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0208 	bic.w	r2, r2, #8
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7f5b      	ldrb	r3, [r3, #29]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d108      	bne.n	80012d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 0204 	orr.w	r2, r2, #4
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	e007      	b.n	80012e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0204 	bic.w	r2, r2, #4
 80012de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	431a      	orrs	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	ea42 0103 	orr.w	r1, r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	1e5a      	subs	r2, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b08a      	sub	sp, #40	; 0x28
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d07c      	beq.n	800145e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d023      	beq.n	80013b6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2201      	movs	r2, #1
 8001374:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f983 	bl	800168c <HAL_CAN_TxMailbox0CompleteCallback>
 8001386:	e016      	b.n	80013b6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	d004      	beq.n	800139c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
 800139a:	e00c      	b.n	80013b6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d004      	beq.n	80013b0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
 80013ae:	e002      	b.n	80013b6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f989 	bl	80016c8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d024      	beq.n	800140a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f963 	bl	80016a0 <HAL_CAN_TxMailbox1CompleteCallback>
 80013da:	e016      	b.n	800140a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d004      	beq.n	80013f0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
 80013ee:	e00c      	b.n	800140a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d004      	beq.n	8001404 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
 8001402:	e002      	b.n	800140a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f969 	bl	80016dc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d024      	beq.n	800145e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800141c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f943 	bl	80016b4 <HAL_CAN_TxMailbox2CompleteCallback>
 800142e:	e016      	b.n	800145e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d004      	beq.n	8001444 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
 8001442:	e00c      	b.n	800145e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d004      	beq.n	8001458 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
 8001456:	e002      	b.n	800145e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f949 	bl	80016f0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00c      	beq.n	8001482 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001478:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2210      	movs	r2, #16
 8001480:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00b      	beq.n	80014a4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2208      	movs	r2, #8
 800149c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f93a 	bl	8001718 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d009      	beq.n	80014c2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f921 	bl	8001704 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00c      	beq.n	80014e6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2210      	movs	r2, #16
 80014e4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	f003 0320 	and.w	r3, r3, #32
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00b      	beq.n	8001508 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2208      	movs	r2, #8
 8001500:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f91c 	bl	8001740 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	2b00      	cmp	r3, #0
 8001510:	d009      	beq.n	8001526 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f903 	bl	800172c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	2b00      	cmp	r3, #0
 8001538:	d006      	beq.n	8001548 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2210      	movs	r2, #16
 8001540:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f906 	bl	8001754 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00b      	beq.n	800156a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2208      	movs	r2, #8
 8001562:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f8ff 	bl	8001768 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d07b      	beq.n	800166c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	2b00      	cmp	r3, #0
 800157c:	d072      	beq.n	8001664 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d008      	beq.n	800159a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d043      	beq.n	8001664 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d03e      	beq.n	8001664 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015ec:	2b60      	cmp	r3, #96	; 0x60
 80015ee:	d02b      	beq.n	8001648 <HAL_CAN_IRQHandler+0x32a>
 80015f0:	2b60      	cmp	r3, #96	; 0x60
 80015f2:	d82e      	bhi.n	8001652 <HAL_CAN_IRQHandler+0x334>
 80015f4:	2b50      	cmp	r3, #80	; 0x50
 80015f6:	d022      	beq.n	800163e <HAL_CAN_IRQHandler+0x320>
 80015f8:	2b50      	cmp	r3, #80	; 0x50
 80015fa:	d82a      	bhi.n	8001652 <HAL_CAN_IRQHandler+0x334>
 80015fc:	2b40      	cmp	r3, #64	; 0x40
 80015fe:	d019      	beq.n	8001634 <HAL_CAN_IRQHandler+0x316>
 8001600:	2b40      	cmp	r3, #64	; 0x40
 8001602:	d826      	bhi.n	8001652 <HAL_CAN_IRQHandler+0x334>
 8001604:	2b30      	cmp	r3, #48	; 0x30
 8001606:	d010      	beq.n	800162a <HAL_CAN_IRQHandler+0x30c>
 8001608:	2b30      	cmp	r3, #48	; 0x30
 800160a:	d822      	bhi.n	8001652 <HAL_CAN_IRQHandler+0x334>
 800160c:	2b10      	cmp	r3, #16
 800160e:	d002      	beq.n	8001616 <HAL_CAN_IRQHandler+0x2f8>
 8001610:	2b20      	cmp	r3, #32
 8001612:	d005      	beq.n	8001620 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001614:	e01d      	b.n	8001652 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800161e:	e019      	b.n	8001654 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	f043 0310 	orr.w	r3, r3, #16
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001628:	e014      	b.n	8001654 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	f043 0320 	orr.w	r3, r3, #32
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001632:	e00f      	b.n	8001654 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800163c:	e00a      	b.n	8001654 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001646:	e005      	b.n	8001654 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001650:	e000      	b.n	8001654 <HAL_CAN_IRQHandler+0x336>
            break;
 8001652:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699a      	ldr	r2, [r3, #24]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001662:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2204      	movs	r2, #4
 800166a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f87c 	bl	800177c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	; 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0b      	blt.n	800181e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4907      	ldr	r1, [pc, #28]	; (800182c <__NVIC_EnableIRQ+0x38>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	fa00 f202 	lsl.w	r2, r0, r2
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f7ff ff8e 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff29 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff3e 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff8e 	bl	8001884 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5d 	bl	8001830 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff31 	bl	80017f4 <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa2 	bl	80018ec <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	e165      	b.n	8001c9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 8154 	bne.w	8001c96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d005      	beq.n	8001a06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d130      	bne.n	8001a68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 0201 	and.w	r2, r3, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d017      	beq.n	8001aa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d123      	bne.n	8001af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	08da      	lsrs	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3208      	adds	r2, #8
 8001ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	08da      	lsrs	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3208      	adds	r2, #8
 8001af2:	69b9      	ldr	r1, [r7, #24]
 8001af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0203 	and.w	r2, r3, #3
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80ae 	beq.w	8001c96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b5d      	ldr	r3, [pc, #372]	; (8001cb4 <HAL_GPIO_Init+0x300>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a5c      	ldr	r2, [pc, #368]	; (8001cb4 <HAL_GPIO_Init+0x300>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b5a      	ldr	r3, [pc, #360]	; (8001cb4 <HAL_GPIO_Init+0x300>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b56:	4a58      	ldr	r2, [pc, #352]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <HAL_GPIO_Init+0x308>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d025      	beq.n	8001bce <HAL_GPIO_Init+0x21a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4e      	ldr	r2, [pc, #312]	; (8001cc0 <HAL_GPIO_Init+0x30c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d01f      	beq.n	8001bca <HAL_GPIO_Init+0x216>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4d      	ldr	r2, [pc, #308]	; (8001cc4 <HAL_GPIO_Init+0x310>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d019      	beq.n	8001bc6 <HAL_GPIO_Init+0x212>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4c      	ldr	r2, [pc, #304]	; (8001cc8 <HAL_GPIO_Init+0x314>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d013      	beq.n	8001bc2 <HAL_GPIO_Init+0x20e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4b      	ldr	r2, [pc, #300]	; (8001ccc <HAL_GPIO_Init+0x318>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00d      	beq.n	8001bbe <HAL_GPIO_Init+0x20a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4a      	ldr	r2, [pc, #296]	; (8001cd0 <HAL_GPIO_Init+0x31c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d007      	beq.n	8001bba <HAL_GPIO_Init+0x206>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a49      	ldr	r2, [pc, #292]	; (8001cd4 <HAL_GPIO_Init+0x320>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d101      	bne.n	8001bb6 <HAL_GPIO_Init+0x202>
 8001bb2:	2306      	movs	r3, #6
 8001bb4:	e00c      	b.n	8001bd0 <HAL_GPIO_Init+0x21c>
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	e00a      	b.n	8001bd0 <HAL_GPIO_Init+0x21c>
 8001bba:	2305      	movs	r3, #5
 8001bbc:	e008      	b.n	8001bd0 <HAL_GPIO_Init+0x21c>
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x21c>
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e004      	b.n	8001bd0 <HAL_GPIO_Init+0x21c>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e002      	b.n	8001bd0 <HAL_GPIO_Init+0x21c>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_GPIO_Init+0x21c>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	f002 0203 	and.w	r2, r2, #3
 8001bd6:	0092      	lsls	r2, r2, #2
 8001bd8:	4093      	lsls	r3, r2
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be0:	4935      	ldr	r1, [pc, #212]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3302      	adds	r3, #2
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bee:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c12:	4a31      	ldr	r2, [pc, #196]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c18:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c3c:	4a26      	ldr	r2, [pc, #152]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c42:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c90:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	61fb      	str	r3, [r7, #28]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	2b0f      	cmp	r3, #15
 8001ca0:	f67f ae96 	bls.w	80019d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3724      	adds	r7, #36	; 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40013800 	.word	0x40013800
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	40020c00 	.word	0x40020c00
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40021400 	.word	0x40021400
 8001cd4:	40021800 	.word	0x40021800
 8001cd8:	40013c00 	.word	0x40013c00

08001cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cec:	787b      	ldrb	r3, [r7, #1]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf8:	e003      	b.n	8001d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	041a      	lsls	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	619a      	str	r2, [r3, #24]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b085      	sub	sp, #20
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	460b      	mov	r3, r1
 8001d18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d20:	887a      	ldrh	r2, [r7, #2]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4013      	ands	r3, r2
 8001d26:	041a      	lsls	r2, r3, #16
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	887b      	ldrh	r3, [r7, #2]
 8001d2e:	400b      	ands	r3, r1
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	619a      	str	r2, [r3, #24]
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fcae 	bl	80006c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40013c00 	.word	0x40013c00

08001d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e12b      	b.n	8001fde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe ffaa 	bl	8000cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2224      	movs	r2, #36	; 0x24
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dd8:	f000 fd5c 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
 8001ddc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a81      	ldr	r2, [pc, #516]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d807      	bhi.n	8001df8 <HAL_I2C_Init+0x84>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4a80      	ldr	r2, [pc, #512]	; (8001fec <HAL_I2C_Init+0x278>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	bf94      	ite	ls
 8001df0:	2301      	movls	r3, #1
 8001df2:	2300      	movhi	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	e006      	b.n	8001e06 <HAL_I2C_Init+0x92>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4a7d      	ldr	r2, [pc, #500]	; (8001ff0 <HAL_I2C_Init+0x27c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	bf94      	ite	ls
 8001e00:	2301      	movls	r3, #1
 8001e02:	2300      	movhi	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0e7      	b.n	8001fde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4a78      	ldr	r2, [pc, #480]	; (8001ff4 <HAL_I2C_Init+0x280>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	0c9b      	lsrs	r3, r3, #18
 8001e18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a6a      	ldr	r2, [pc, #424]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d802      	bhi.n	8001e48 <HAL_I2C_Init+0xd4>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3301      	adds	r3, #1
 8001e46:	e009      	b.n	8001e5c <HAL_I2C_Init+0xe8>
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e4e:	fb02 f303 	mul.w	r3, r2, r3
 8001e52:	4a69      	ldr	r2, [pc, #420]	; (8001ff8 <HAL_I2C_Init+0x284>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	495c      	ldr	r1, [pc, #368]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001e78:	428b      	cmp	r3, r1
 8001e7a:	d819      	bhi.n	8001eb0 <HAL_I2C_Init+0x13c>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e59      	subs	r1, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e8a:	1c59      	adds	r1, r3, #1
 8001e8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e90:	400b      	ands	r3, r1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_I2C_Init+0x138>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1e59      	subs	r1, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eaa:	e051      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001eac:	2304      	movs	r3, #4
 8001eae:	e04f      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d111      	bne.n	8001edc <HAL_I2C_Init+0x168>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e58      	subs	r0, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	440b      	add	r3, r1
 8001ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e012      	b.n	8001f02 <HAL_I2C_Init+0x18e>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e58      	subs	r0, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	0099      	lsls	r1, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Init+0x196>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e022      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10e      	bne.n	8001f30 <HAL_I2C_Init+0x1bc>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1e58      	subs	r0, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6859      	ldr	r1, [r3, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	440b      	add	r3, r1
 8001f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f24:	3301      	adds	r3, #1
 8001f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f2e:	e00f      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1e58      	subs	r0, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	0099      	lsls	r1, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	6809      	ldr	r1, [r1, #0]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6911      	ldr	r1, [r2, #16]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68d2      	ldr	r2, [r2, #12]
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	000186a0 	.word	0x000186a0
 8001fec:	001e847f 	.word	0x001e847f
 8001ff0:	003d08ff 	.word	0x003d08ff
 8001ff4:	431bde83 	.word	0x431bde83
 8001ff8:	10624dd3 	.word	0x10624dd3

08001ffc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	461a      	mov	r2, r3
 8002008:	460b      	mov	r3, r1
 800200a:	817b      	strh	r3, [r7, #10]
 800200c:	4613      	mov	r3, r2
 800200e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff f85a 	bl	80010c8 <HAL_GetTick>
 8002014:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b20      	cmp	r3, #32
 8002020:	f040 80e0 	bne.w	80021e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2319      	movs	r3, #25
 800202a:	2201      	movs	r2, #1
 800202c:	4970      	ldr	r1, [pc, #448]	; (80021f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f964 	bl	80022fc <I2C_WaitOnFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
 800203c:	e0d3      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_I2C_Master_Transmit+0x50>
 8002048:	2302      	movs	r3, #2
 800204a:	e0cc      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d007      	beq.n	8002072 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002080:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2221      	movs	r2, #33	; 0x21
 8002086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2210      	movs	r2, #16
 800208e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	893a      	ldrh	r2, [r7, #8]
 80020a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4a50      	ldr	r2, [pc, #320]	; (80021f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020b4:	8979      	ldrh	r1, [r7, #10]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6a3a      	ldr	r2, [r7, #32]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f89c 	bl	80021f8 <I2C_MasterRequestWrite>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e08d      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020e0:	e066      	b.n	80021b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	6a39      	ldr	r1, [r7, #32]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 fa22 	bl	8002530 <I2C_WaitOnTXEFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d107      	bne.n	800210a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002108:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06b      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b04      	cmp	r3, #4
 800214a:	d11b      	bne.n	8002184 <HAL_I2C_Master_Transmit+0x188>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	d017      	beq.n	8002184 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216e:	b29b      	uxth	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	6a39      	ldr	r1, [r7, #32]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 fa19 	bl	80025c0 <I2C_WaitOnBTFFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00d      	beq.n	80021b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	2b04      	cmp	r3, #4
 800219a:	d107      	bne.n	80021ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e01a      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d194      	bne.n	80020e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e000      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
  }
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	00100002 	.word	0x00100002
 80021f4:	ffff0000 	.word	0xffff0000

080021f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	460b      	mov	r3, r1
 8002206:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b08      	cmp	r3, #8
 8002212:	d006      	beq.n	8002222 <I2C_MasterRequestWrite+0x2a>
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d003      	beq.n	8002222 <I2C_MasterRequestWrite+0x2a>
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002220:	d108      	bne.n	8002234 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e00b      	b.n	800224c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	2b12      	cmp	r3, #18
 800223a:	d107      	bne.n	800224c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800224a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f84f 	bl	80022fc <I2C_WaitOnFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00d      	beq.n	8002280 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002272:	d103      	bne.n	800227c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e035      	b.n	80022ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002288:	d108      	bne.n	800229c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800228a:	897b      	ldrh	r3, [r7, #10]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	e01b      	b.n	80022d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800229c:	897b      	ldrh	r3, [r7, #10]
 800229e:	11db      	asrs	r3, r3, #7
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f003 0306 	and.w	r3, r3, #6
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f063 030f 	orn	r3, r3, #15
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	490e      	ldr	r1, [pc, #56]	; (80022f4 <I2C_MasterRequestWrite+0xfc>)
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f898 	bl	80023f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e010      	b.n	80022ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022ca:	897b      	ldrh	r3, [r7, #10]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4907      	ldr	r1, [pc, #28]	; (80022f8 <I2C_MasterRequestWrite+0x100>)
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f888 	bl	80023f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	00010008 	.word	0x00010008
 80022f8:	00010002 	.word	0x00010002

080022fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800230c:	e048      	b.n	80023a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002314:	d044      	beq.n	80023a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002316:	f7fe fed7 	bl	80010c8 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d302      	bcc.n	800232c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d139      	bne.n	80023a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	0c1b      	lsrs	r3, r3, #16
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d10d      	bne.n	8002352 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	43da      	mvns	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	4013      	ands	r3, r2
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf0c      	ite	eq
 8002348:	2301      	moveq	r3, #1
 800234a:	2300      	movne	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	461a      	mov	r2, r3
 8002350:	e00c      	b.n	800236c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	43da      	mvns	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4013      	ands	r3, r2
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	429a      	cmp	r2, r3
 8002370:	d116      	bne.n	80023a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f043 0220 	orr.w	r2, r3, #32
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e023      	b.n	80023e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d10d      	bne.n	80023c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	43da      	mvns	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	4013      	ands	r3, r2
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	e00c      	b.n	80023e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	43da      	mvns	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	4013      	ands	r3, r2
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d093      	beq.n	800230e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023fe:	e071      	b.n	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800240e:	d123      	bne.n	8002458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002428:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f043 0204 	orr.w	r2, r3, #4
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e067      	b.n	8002528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245e:	d041      	beq.n	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002460:	f7fe fe32 	bl	80010c8 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	429a      	cmp	r2, r3
 800246e:	d302      	bcc.n	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d136      	bne.n	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	0c1b      	lsrs	r3, r3, #16
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d10c      	bne.n	800249a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4013      	ands	r3, r2
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf14      	ite	ne
 8002492:	2301      	movne	r3, #1
 8002494:	2300      	moveq	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	e00b      	b.n	80024b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	43da      	mvns	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4013      	ands	r3, r2
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bf14      	ite	ne
 80024ac:	2301      	movne	r3, #1
 80024ae:	2300      	moveq	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d016      	beq.n	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f043 0220 	orr.w	r2, r3, #32
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e021      	b.n	8002528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	0c1b      	lsrs	r3, r3, #16
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d10c      	bne.n	8002508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	43da      	mvns	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	4013      	ands	r3, r2
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf14      	ite	ne
 8002500:	2301      	movne	r3, #1
 8002502:	2300      	moveq	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e00b      	b.n	8002520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4013      	ands	r3, r2
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf14      	ite	ne
 800251a:	2301      	movne	r3, #1
 800251c:	2300      	moveq	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	f47f af6d 	bne.w	8002400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800253c:	e034      	b.n	80025a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f886 	bl	8002650 <I2C_IsAcknowledgeFailed>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e034      	b.n	80025b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002554:	d028      	beq.n	80025a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002556:	f7fe fdb7 	bl	80010c8 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	429a      	cmp	r2, r3
 8002564:	d302      	bcc.n	800256c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d11d      	bne.n	80025a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002576:	2b80      	cmp	r3, #128	; 0x80
 8002578:	d016      	beq.n	80025a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	f043 0220 	orr.w	r2, r3, #32
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e007      	b.n	80025b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b2:	2b80      	cmp	r3, #128	; 0x80
 80025b4:	d1c3      	bne.n	800253e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025cc:	e034      	b.n	8002638 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f83e 	bl	8002650 <I2C_IsAcknowledgeFailed>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e034      	b.n	8002648 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d028      	beq.n	8002638 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e6:	f7fe fd6f 	bl	80010c8 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d302      	bcc.n	80025fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d11d      	bne.n	8002638 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b04      	cmp	r3, #4
 8002608:	d016      	beq.n	8002638 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f043 0220 	orr.w	r2, r3, #32
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e007      	b.n	8002648 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b04      	cmp	r3, #4
 8002644:	d1c3      	bne.n	80025ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002666:	d11b      	bne.n	80026a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002670:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	f043 0204 	orr.w	r2, r3, #4
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0cc      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c4:	4b68      	ldr	r3, [pc, #416]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d90c      	bls.n	80026ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b65      	ldr	r3, [pc, #404]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b63      	ldr	r3, [pc, #396]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0b8      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002704:	4b59      	ldr	r3, [pc, #356]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	4a58      	ldr	r2, [pc, #352]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800270e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800271c:	4b53      	ldr	r3, [pc, #332]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002728:	4b50      	ldr	r3, [pc, #320]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	494d      	ldr	r1, [pc, #308]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d044      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d119      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e07f      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d003      	beq.n	800276e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800276a:	2b03      	cmp	r3, #3
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276e:	4b3f      	ldr	r3, [pc, #252]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e06f      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277e:	4b3b      	ldr	r3, [pc, #236]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e067      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278e:	4b37      	ldr	r3, [pc, #220]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f023 0203 	bic.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4934      	ldr	r1, [pc, #208]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	4313      	orrs	r3, r2
 800279e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a0:	f7fe fc92 	bl	80010c8 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	e00a      	b.n	80027be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f7fe fc8e 	bl	80010c8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e04f      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	4b2b      	ldr	r3, [pc, #172]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 020c 	and.w	r2, r3, #12
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d1eb      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027d0:	4b25      	ldr	r3, [pc, #148]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d20c      	bcs.n	80027f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b22      	ldr	r3, [pc, #136]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e032      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4916      	ldr	r1, [pc, #88]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	490e      	ldr	r1, [pc, #56]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002836:	f000 f855 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 800283a:	4602      	mov	r2, r0
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	490a      	ldr	r1, [pc, #40]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	5ccb      	ldrb	r3, [r1, r3]
 800284a:	fa22 f303 	lsr.w	r3, r2, r3
 800284e:	4a09      	ldr	r2, [pc, #36]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fbf2 	bl	8001040 <HAL_InitTick>

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023c00 	.word	0x40023c00
 800286c:	40023800 	.word	0x40023800
 8002870:	080038cc 	.word	0x080038cc
 8002874:	20000034 	.word	0x20000034
 8002878:	20000038 	.word	0x20000038

0800287c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <HAL_RCC_GetHCLKFreq+0x14>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20000034 	.word	0x20000034

08002894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002898:	f7ff fff0 	bl	800287c <HAL_RCC_GetHCLKFreq>
 800289c:	4602      	mov	r2, r0
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	0a9b      	lsrs	r3, r3, #10
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	4903      	ldr	r1, [pc, #12]	; (80028b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028aa:	5ccb      	ldrb	r3, [r1, r3]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40023800 	.word	0x40023800
 80028b8:	080038dc 	.word	0x080038dc

080028bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028c0:	f7ff ffdc 	bl	800287c <HAL_RCC_GetHCLKFreq>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	0b5b      	lsrs	r3, r3, #13
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	4903      	ldr	r1, [pc, #12]	; (80028e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d2:	5ccb      	ldrb	r3, [r1, r3]
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40023800 	.word	0x40023800
 80028e0:	080038dc 	.word	0x080038dc

080028e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e8:	b0ae      	sub	sp, #184	; 0xb8
 80028ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800290a:	4bcb      	ldr	r3, [pc, #812]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x354>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b0c      	cmp	r3, #12
 8002914:	f200 8206 	bhi.w	8002d24 <HAL_RCC_GetSysClockFreq+0x440>
 8002918:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <HAL_RCC_GetSysClockFreq+0x3c>)
 800291a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291e:	bf00      	nop
 8002920:	08002955 	.word	0x08002955
 8002924:	08002d25 	.word	0x08002d25
 8002928:	08002d25 	.word	0x08002d25
 800292c:	08002d25 	.word	0x08002d25
 8002930:	0800295d 	.word	0x0800295d
 8002934:	08002d25 	.word	0x08002d25
 8002938:	08002d25 	.word	0x08002d25
 800293c:	08002d25 	.word	0x08002d25
 8002940:	08002965 	.word	0x08002965
 8002944:	08002d25 	.word	0x08002d25
 8002948:	08002d25 	.word	0x08002d25
 800294c:	08002d25 	.word	0x08002d25
 8002950:	08002b55 	.word	0x08002b55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002954:	4bb9      	ldr	r3, [pc, #740]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x358>)
 8002956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800295a:	e1e7      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800295c:	4bb8      	ldr	r3, [pc, #736]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x35c>)
 800295e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002962:	e1e3      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002964:	4bb4      	ldr	r3, [pc, #720]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x354>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800296c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002970:	4bb1      	ldr	r3, [pc, #708]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x354>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d071      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297c:	4bae      	ldr	r3, [pc, #696]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x354>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	099b      	lsrs	r3, r3, #6
 8002982:	2200      	movs	r2, #0
 8002984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002988:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800298c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002994:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002998:	2300      	movs	r3, #0
 800299a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800299e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029a2:	4622      	mov	r2, r4
 80029a4:	462b      	mov	r3, r5
 80029a6:	f04f 0000 	mov.w	r0, #0
 80029aa:	f04f 0100 	mov.w	r1, #0
 80029ae:	0159      	lsls	r1, r3, #5
 80029b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029b4:	0150      	lsls	r0, r2, #5
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4621      	mov	r1, r4
 80029bc:	1a51      	subs	r1, r2, r1
 80029be:	6439      	str	r1, [r7, #64]	; 0x40
 80029c0:	4629      	mov	r1, r5
 80029c2:	eb63 0301 	sbc.w	r3, r3, r1
 80029c6:	647b      	str	r3, [r7, #68]	; 0x44
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80029d4:	4649      	mov	r1, r9
 80029d6:	018b      	lsls	r3, r1, #6
 80029d8:	4641      	mov	r1, r8
 80029da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029de:	4641      	mov	r1, r8
 80029e0:	018a      	lsls	r2, r1, #6
 80029e2:	4641      	mov	r1, r8
 80029e4:	1a51      	subs	r1, r2, r1
 80029e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80029e8:	4649      	mov	r1, r9
 80029ea:	eb63 0301 	sbc.w	r3, r3, r1
 80029ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80029fc:	4649      	mov	r1, r9
 80029fe:	00cb      	lsls	r3, r1, #3
 8002a00:	4641      	mov	r1, r8
 8002a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a06:	4641      	mov	r1, r8
 8002a08:	00ca      	lsls	r2, r1, #3
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4622      	mov	r2, r4
 8002a12:	189b      	adds	r3, r3, r2
 8002a14:	633b      	str	r3, [r7, #48]	; 0x30
 8002a16:	462b      	mov	r3, r5
 8002a18:	460a      	mov	r2, r1
 8002a1a:	eb42 0303 	adc.w	r3, r2, r3
 8002a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	024b      	lsls	r3, r1, #9
 8002a30:	4621      	mov	r1, r4
 8002a32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a36:	4621      	mov	r1, r4
 8002a38:	024a      	lsls	r2, r1, #9
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a42:	2200      	movs	r2, #0
 8002a44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002a50:	f7fd fbd8 	bl	8000204 <__aeabi_uldivmod>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4613      	mov	r3, r2
 8002a5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a5e:	e067      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a60:	4b75      	ldr	r3, [pc, #468]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	099b      	lsrs	r3, r3, #6
 8002a66:	2200      	movs	r2, #0
 8002a68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a6c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002a70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a78:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002a82:	4622      	mov	r2, r4
 8002a84:	462b      	mov	r3, r5
 8002a86:	f04f 0000 	mov.w	r0, #0
 8002a8a:	f04f 0100 	mov.w	r1, #0
 8002a8e:	0159      	lsls	r1, r3, #5
 8002a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a94:	0150      	lsls	r0, r2, #5
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	1a51      	subs	r1, r2, r1
 8002a9e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	018b      	lsls	r3, r1, #6
 8002ab8:	4641      	mov	r1, r8
 8002aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002abe:	4641      	mov	r1, r8
 8002ac0:	018a      	lsls	r2, r1, #6
 8002ac2:	4641      	mov	r1, r8
 8002ac4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ac8:	4649      	mov	r1, r9
 8002aca:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ada:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ade:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ae2:	4692      	mov	sl, r2
 8002ae4:	469b      	mov	fp, r3
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	eb1a 0303 	adds.w	r3, sl, r3
 8002aec:	623b      	str	r3, [r7, #32]
 8002aee:	462b      	mov	r3, r5
 8002af0:	eb4b 0303 	adc.w	r3, fp, r3
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b02:	4629      	mov	r1, r5
 8002b04:	028b      	lsls	r3, r1, #10
 8002b06:	4621      	mov	r1, r4
 8002b08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	028a      	lsls	r2, r1, #10
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b18:	2200      	movs	r2, #0
 8002b1a:	673b      	str	r3, [r7, #112]	; 0x70
 8002b1c:	677a      	str	r2, [r7, #116]	; 0x74
 8002b1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002b22:	f7fd fb6f 	bl	8000204 <__aeabi_uldivmod>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b30:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b52:	e0eb      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b54:	4b38      	ldr	r3, [pc, #224]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b60:	4b35      	ldr	r3, [pc, #212]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d06b      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6c:	4b32      	ldr	r3, [pc, #200]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	099b      	lsrs	r3, r3, #6
 8002b72:	2200      	movs	r2, #0
 8002b74:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b7e:	663b      	str	r3, [r7, #96]	; 0x60
 8002b80:	2300      	movs	r3, #0
 8002b82:	667b      	str	r3, [r7, #100]	; 0x64
 8002b84:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002b88:	4622      	mov	r2, r4
 8002b8a:	462b      	mov	r3, r5
 8002b8c:	f04f 0000 	mov.w	r0, #0
 8002b90:	f04f 0100 	mov.w	r1, #0
 8002b94:	0159      	lsls	r1, r3, #5
 8002b96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b9a:	0150      	lsls	r0, r2, #5
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	1a51      	subs	r1, r2, r1
 8002ba4:	61b9      	str	r1, [r7, #24]
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	eb63 0301 	sbc.w	r3, r3, r1
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002bba:	4659      	mov	r1, fp
 8002bbc:	018b      	lsls	r3, r1, #6
 8002bbe:	4651      	mov	r1, sl
 8002bc0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bc4:	4651      	mov	r1, sl
 8002bc6:	018a      	lsls	r2, r1, #6
 8002bc8:	4651      	mov	r1, sl
 8002bca:	ebb2 0801 	subs.w	r8, r2, r1
 8002bce:	4659      	mov	r1, fp
 8002bd0:	eb63 0901 	sbc.w	r9, r3, r1
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002be0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002be4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002be8:	4690      	mov	r8, r2
 8002bea:	4699      	mov	r9, r3
 8002bec:	4623      	mov	r3, r4
 8002bee:	eb18 0303 	adds.w	r3, r8, r3
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	462b      	mov	r3, r5
 8002bf6:	eb49 0303 	adc.w	r3, r9, r3
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c08:	4629      	mov	r1, r5
 8002c0a:	024b      	lsls	r3, r1, #9
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c12:	4621      	mov	r1, r4
 8002c14:	024a      	lsls	r2, r1, #9
 8002c16:	4610      	mov	r0, r2
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c1e:	2200      	movs	r2, #0
 8002c20:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c22:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002c24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c28:	f7fd faec 	bl	8000204 <__aeabi_uldivmod>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4613      	mov	r3, r2
 8002c32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c36:	e065      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0x420>
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	00f42400 	.word	0x00f42400
 8002c40:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c44:	4b3d      	ldr	r3, [pc, #244]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x458>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	4611      	mov	r1, r2
 8002c50:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c54:	653b      	str	r3, [r7, #80]	; 0x50
 8002c56:	2300      	movs	r3, #0
 8002c58:	657b      	str	r3, [r7, #84]	; 0x54
 8002c5a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002c5e:	4642      	mov	r2, r8
 8002c60:	464b      	mov	r3, r9
 8002c62:	f04f 0000 	mov.w	r0, #0
 8002c66:	f04f 0100 	mov.w	r1, #0
 8002c6a:	0159      	lsls	r1, r3, #5
 8002c6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c70:	0150      	lsls	r0, r2, #5
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4641      	mov	r1, r8
 8002c78:	1a51      	subs	r1, r2, r1
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	4649      	mov	r1, r9
 8002c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002c90:	4659      	mov	r1, fp
 8002c92:	018b      	lsls	r3, r1, #6
 8002c94:	4651      	mov	r1, sl
 8002c96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c9a:	4651      	mov	r1, sl
 8002c9c:	018a      	lsls	r2, r1, #6
 8002c9e:	4651      	mov	r1, sl
 8002ca0:	1a54      	subs	r4, r2, r1
 8002ca2:	4659      	mov	r1, fp
 8002ca4:	eb63 0501 	sbc.w	r5, r3, r1
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	00eb      	lsls	r3, r5, #3
 8002cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cb6:	00e2      	lsls	r2, r4, #3
 8002cb8:	4614      	mov	r4, r2
 8002cba:	461d      	mov	r5, r3
 8002cbc:	4643      	mov	r3, r8
 8002cbe:	18e3      	adds	r3, r4, r3
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	464b      	mov	r3, r9
 8002cc4:	eb45 0303 	adc.w	r3, r5, r3
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	028b      	lsls	r3, r1, #10
 8002cda:	4621      	mov	r1, r4
 8002cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	028a      	lsls	r2, r1, #10
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cec:	2200      	movs	r2, #0
 8002cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cf0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002cf2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cf6:	f7fd fa85 	bl	8000204 <__aeabi_uldivmod>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4613      	mov	r3, r2
 8002d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d04:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x458>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	0f1b      	lsrs	r3, r3, #28
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002d12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d22:	e003      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002d26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	37b8      	adds	r7, #184	; 0xb8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	00f42400 	.word	0x00f42400

08002d44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e28d      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8083 	beq.w	8002e6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d64:	4b94      	ldr	r3, [pc, #592]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d019      	beq.n	8002da4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d70:	4b91      	ldr	r3, [pc, #580]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d106      	bne.n	8002d8a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d7c:	4b8e      	ldr	r3, [pc, #568]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d88:	d00c      	beq.n	8002da4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d8a:	4b8b      	ldr	r3, [pc, #556]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d92:	2b0c      	cmp	r3, #12
 8002d94:	d112      	bne.n	8002dbc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d96:	4b88      	ldr	r3, [pc, #544]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da2:	d10b      	bne.n	8002dbc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da4:	4b84      	ldr	r3, [pc, #528]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d05b      	beq.n	8002e68 <HAL_RCC_OscConfig+0x124>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d157      	bne.n	8002e68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e25a      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc4:	d106      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x90>
 8002dc6:	4b7c      	ldr	r3, [pc, #496]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a7b      	ldr	r2, [pc, #492]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	e01d      	b.n	8002e10 <HAL_RCC_OscConfig+0xcc>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0xb4>
 8002dde:	4b76      	ldr	r3, [pc, #472]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a75      	ldr	r2, [pc, #468]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	4b73      	ldr	r3, [pc, #460]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a72      	ldr	r2, [pc, #456]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e00b      	b.n	8002e10 <HAL_RCC_OscConfig+0xcc>
 8002df8:	4b6f      	ldr	r3, [pc, #444]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a6e      	ldr	r2, [pc, #440]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	4b6c      	ldr	r3, [pc, #432]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a6b      	ldr	r2, [pc, #428]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d013      	beq.n	8002e40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe f956 	bl	80010c8 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e20:	f7fe f952 	bl	80010c8 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	; 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e21f      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0xdc>
 8002e3e:	e014      	b.n	8002e6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe f942 	bl	80010c8 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e48:	f7fe f93e 	bl	80010c8 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e20b      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5a:	4b57      	ldr	r3, [pc, #348]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x104>
 8002e66:	e000      	b.n	8002e6a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d06f      	beq.n	8002f56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e76:	4b50      	ldr	r3, [pc, #320]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d017      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e82:	4b4d      	ldr	r3, [pc, #308]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d105      	bne.n	8002e9a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e8e:	4b4a      	ldr	r3, [pc, #296]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9a:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d11c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea6:	4b44      	ldr	r3, [pc, #272]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d116      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb2:	4b41      	ldr	r3, [pc, #260]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_RCC_OscConfig+0x186>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e1d3      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eca:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4937      	ldr	r1, [pc, #220]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ede:	e03a      	b.n	8002f56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d020      	beq.n	8002f2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee8:	4b34      	ldr	r3, [pc, #208]	; (8002fbc <HAL_RCC_OscConfig+0x278>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7fe f8eb 	bl	80010c8 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef6:	f7fe f8e7 	bl	80010c8 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e1b4      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f08:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4925      	ldr	r1, [pc, #148]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]
 8002f28:	e015      	b.n	8002f56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2a:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <HAL_RCC_OscConfig+0x278>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe f8ca 	bl	80010c8 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f38:	f7fe f8c6 	bl	80010c8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e193      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d036      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d016      	beq.n	8002f98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <HAL_RCC_OscConfig+0x27c>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe f8aa 	bl	80010c8 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fe f8a6 	bl	80010c8 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e173      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x234>
 8002f96:	e01b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_RCC_OscConfig+0x27c>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9e:	f7fe f893 	bl	80010c8 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa4:	e00e      	b.n	8002fc4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa6:	f7fe f88f 	bl	80010c8 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d907      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e15c      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	42470000 	.word	0x42470000
 8002fc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc4:	4b8a      	ldr	r3, [pc, #552]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 8002fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1ea      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8097 	beq.w	800310c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe2:	4b83      	ldr	r3, [pc, #524]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10f      	bne.n	800300e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	4b7f      	ldr	r3, [pc, #508]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	4a7e      	ldr	r2, [pc, #504]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffe:	4b7c      	ldr	r3, [pc, #496]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300a:	2301      	movs	r3, #1
 800300c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300e:	4b79      	ldr	r3, [pc, #484]	; (80031f4 <HAL_RCC_OscConfig+0x4b0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d118      	bne.n	800304c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800301a:	4b76      	ldr	r3, [pc, #472]	; (80031f4 <HAL_RCC_OscConfig+0x4b0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a75      	ldr	r2, [pc, #468]	; (80031f4 <HAL_RCC_OscConfig+0x4b0>)
 8003020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003026:	f7fe f84f 	bl	80010c8 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302e:	f7fe f84b 	bl	80010c8 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e118      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	4b6c      	ldr	r3, [pc, #432]	; (80031f4 <HAL_RCC_OscConfig+0x4b0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x31e>
 8003054:	4b66      	ldr	r3, [pc, #408]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	4a65      	ldr	r2, [pc, #404]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6713      	str	r3, [r2, #112]	; 0x70
 8003060:	e01c      	b.n	800309c <HAL_RCC_OscConfig+0x358>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b05      	cmp	r3, #5
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x340>
 800306a:	4b61      	ldr	r3, [pc, #388]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a60      	ldr	r2, [pc, #384]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 8003070:	f043 0304 	orr.w	r3, r3, #4
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
 8003076:	4b5e      	ldr	r3, [pc, #376]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	4a5d      	ldr	r2, [pc, #372]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6713      	str	r3, [r2, #112]	; 0x70
 8003082:	e00b      	b.n	800309c <HAL_RCC_OscConfig+0x358>
 8003084:	4b5a      	ldr	r3, [pc, #360]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	4a59      	ldr	r2, [pc, #356]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	6713      	str	r3, [r2, #112]	; 0x70
 8003090:	4b57      	ldr	r3, [pc, #348]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 8003092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003094:	4a56      	ldr	r2, [pc, #344]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 8003096:	f023 0304 	bic.w	r3, r3, #4
 800309a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d015      	beq.n	80030d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fe f810 	bl	80010c8 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ac:	f7fe f80c 	bl	80010c8 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e0d7      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c2:	4b4b      	ldr	r3, [pc, #300]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0ee      	beq.n	80030ac <HAL_RCC_OscConfig+0x368>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d0:	f7fd fffa 	bl	80010c8 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d8:	f7fd fff6 	bl	80010c8 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0c1      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ee:	4b40      	ldr	r3, [pc, #256]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1ee      	bne.n	80030d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d105      	bne.n	800310c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003100:	4b3b      	ldr	r3, [pc, #236]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	4a3a      	ldr	r2, [pc, #232]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 8003106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80ad 	beq.w	8003270 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003116:	4b36      	ldr	r3, [pc, #216]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b08      	cmp	r3, #8
 8003120:	d060      	beq.n	80031e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d145      	bne.n	80031b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312a:	4b33      	ldr	r3, [pc, #204]	; (80031f8 <HAL_RCC_OscConfig+0x4b4>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fd ffca 	bl	80010c8 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003138:	f7fd ffc6 	bl	80010c8 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e093      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	4b29      	ldr	r3, [pc, #164]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	019b      	lsls	r3, r3, #6
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	085b      	lsrs	r3, r3, #1
 800316e:	3b01      	subs	r3, #1
 8003170:	041b      	lsls	r3, r3, #16
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	071b      	lsls	r3, r3, #28
 8003182:	491b      	ldr	r1, [pc, #108]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <HAL_RCC_OscConfig+0x4b4>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fd ff9b 	bl	80010c8 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003196:	f7fd ff97 	bl	80010c8 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e064      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x452>
 80031b4:	e05c      	b.n	8003270 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <HAL_RCC_OscConfig+0x4b4>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031bc:	f7fd ff84 	bl	80010c8 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c4:	f7fd ff80 	bl	80010c8 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e04d      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_RCC_OscConfig+0x4ac>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x480>
 80031e2:	e045      	b.n	8003270 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d107      	bne.n	80031fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e040      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40007000 	.word	0x40007000
 80031f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031fc:	4b1f      	ldr	r3, [pc, #124]	; (800327c <HAL_RCC_OscConfig+0x538>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d030      	beq.n	800326c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d129      	bne.n	800326c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003222:	429a      	cmp	r2, r3
 8003224:	d122      	bne.n	800326c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800322c:	4013      	ands	r3, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003232:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003234:	4293      	cmp	r3, r2
 8003236:	d119      	bne.n	800326c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	085b      	lsrs	r3, r3, #1
 8003244:	3b01      	subs	r3, #1
 8003246:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003248:	429a      	cmp	r2, r3
 800324a:	d10f      	bne.n	800326c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d107      	bne.n	800326c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800

08003280 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e042      	b.n	8003318 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fd fda2 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2224      	movs	r2, #36	; 0x24
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f82b 	bl	8003320 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003324:	b0c0      	sub	sp, #256	; 0x100
 8003326:	af00      	add	r7, sp, #0
 8003328:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333c:	68d9      	ldr	r1, [r3, #12]
 800333e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	ea40 0301 	orr.w	r3, r0, r1
 8003348:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800334a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	431a      	orrs	r2, r3
 8003358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	431a      	orrs	r2, r3
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003378:	f021 010c 	bic.w	r1, r1, #12
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003386:	430b      	orrs	r3, r1
 8003388:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800338a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339a:	6999      	ldr	r1, [r3, #24]
 800339c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	ea40 0301 	orr.w	r3, r0, r1
 80033a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b8f      	ldr	r3, [pc, #572]	; (80035ec <UART_SetConfig+0x2cc>)
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d005      	beq.n	80033c0 <UART_SetConfig+0xa0>
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4b8d      	ldr	r3, [pc, #564]	; (80035f0 <UART_SetConfig+0x2d0>)
 80033bc:	429a      	cmp	r2, r3
 80033be:	d104      	bne.n	80033ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033c0:	f7ff fa7c 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 80033c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033c8:	e003      	b.n	80033d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033ca:	f7ff fa63 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
 80033ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033dc:	f040 810c 	bne.w	80035f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e4:	2200      	movs	r2, #0
 80033e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033f2:	4622      	mov	r2, r4
 80033f4:	462b      	mov	r3, r5
 80033f6:	1891      	adds	r1, r2, r2
 80033f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80033fa:	415b      	adcs	r3, r3
 80033fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003402:	4621      	mov	r1, r4
 8003404:	eb12 0801 	adds.w	r8, r2, r1
 8003408:	4629      	mov	r1, r5
 800340a:	eb43 0901 	adc.w	r9, r3, r1
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800341a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800341e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003422:	4690      	mov	r8, r2
 8003424:	4699      	mov	r9, r3
 8003426:	4623      	mov	r3, r4
 8003428:	eb18 0303 	adds.w	r3, r8, r3
 800342c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003430:	462b      	mov	r3, r5
 8003432:	eb49 0303 	adc.w	r3, r9, r3
 8003436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003446:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800344a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800344e:	460b      	mov	r3, r1
 8003450:	18db      	adds	r3, r3, r3
 8003452:	653b      	str	r3, [r7, #80]	; 0x50
 8003454:	4613      	mov	r3, r2
 8003456:	eb42 0303 	adc.w	r3, r2, r3
 800345a:	657b      	str	r3, [r7, #84]	; 0x54
 800345c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003460:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003464:	f7fc fece 	bl	8000204 <__aeabi_uldivmod>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4b61      	ldr	r3, [pc, #388]	; (80035f4 <UART_SetConfig+0x2d4>)
 800346e:	fba3 2302 	umull	r2, r3, r3, r2
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	011c      	lsls	r4, r3, #4
 8003476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800347a:	2200      	movs	r2, #0
 800347c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003480:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003484:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003488:	4642      	mov	r2, r8
 800348a:	464b      	mov	r3, r9
 800348c:	1891      	adds	r1, r2, r2
 800348e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003490:	415b      	adcs	r3, r3
 8003492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003494:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003498:	4641      	mov	r1, r8
 800349a:	eb12 0a01 	adds.w	sl, r2, r1
 800349e:	4649      	mov	r1, r9
 80034a0:	eb43 0b01 	adc.w	fp, r3, r1
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034b8:	4692      	mov	sl, r2
 80034ba:	469b      	mov	fp, r3
 80034bc:	4643      	mov	r3, r8
 80034be:	eb1a 0303 	adds.w	r3, sl, r3
 80034c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034c6:	464b      	mov	r3, r9
 80034c8:	eb4b 0303 	adc.w	r3, fp, r3
 80034cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034e4:	460b      	mov	r3, r1
 80034e6:	18db      	adds	r3, r3, r3
 80034e8:	643b      	str	r3, [r7, #64]	; 0x40
 80034ea:	4613      	mov	r3, r2
 80034ec:	eb42 0303 	adc.w	r3, r2, r3
 80034f0:	647b      	str	r3, [r7, #68]	; 0x44
 80034f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034fa:	f7fc fe83 	bl	8000204 <__aeabi_uldivmod>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4611      	mov	r1, r2
 8003504:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <UART_SetConfig+0x2d4>)
 8003506:	fba3 2301 	umull	r2, r3, r3, r1
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	2264      	movs	r2, #100	; 0x64
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	1acb      	subs	r3, r1, r3
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800351a:	4b36      	ldr	r3, [pc, #216]	; (80035f4 <UART_SetConfig+0x2d4>)
 800351c:	fba3 2302 	umull	r2, r3, r3, r2
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003528:	441c      	add	r4, r3
 800352a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352e:	2200      	movs	r2, #0
 8003530:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003534:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003538:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800353c:	4642      	mov	r2, r8
 800353e:	464b      	mov	r3, r9
 8003540:	1891      	adds	r1, r2, r2
 8003542:	63b9      	str	r1, [r7, #56]	; 0x38
 8003544:	415b      	adcs	r3, r3
 8003546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003548:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800354c:	4641      	mov	r1, r8
 800354e:	1851      	adds	r1, r2, r1
 8003550:	6339      	str	r1, [r7, #48]	; 0x30
 8003552:	4649      	mov	r1, r9
 8003554:	414b      	adcs	r3, r1
 8003556:	637b      	str	r3, [r7, #52]	; 0x34
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003564:	4659      	mov	r1, fp
 8003566:	00cb      	lsls	r3, r1, #3
 8003568:	4651      	mov	r1, sl
 800356a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800356e:	4651      	mov	r1, sl
 8003570:	00ca      	lsls	r2, r1, #3
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	4603      	mov	r3, r0
 8003578:	4642      	mov	r2, r8
 800357a:	189b      	adds	r3, r3, r2
 800357c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003580:	464b      	mov	r3, r9
 8003582:	460a      	mov	r2, r1
 8003584:	eb42 0303 	adc.w	r3, r2, r3
 8003588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800358c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003598:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800359c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035a0:	460b      	mov	r3, r1
 80035a2:	18db      	adds	r3, r3, r3
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a6:	4613      	mov	r3, r2
 80035a8:	eb42 0303 	adc.w	r3, r2, r3
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035b6:	f7fc fe25 	bl	8000204 <__aeabi_uldivmod>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <UART_SetConfig+0x2d4>)
 80035c0:	fba3 1302 	umull	r1, r3, r3, r2
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	2164      	movs	r1, #100	; 0x64
 80035c8:	fb01 f303 	mul.w	r3, r1, r3
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	3332      	adds	r3, #50	; 0x32
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <UART_SetConfig+0x2d4>)
 80035d4:	fba2 2303 	umull	r2, r3, r2, r3
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	f003 0207 	and.w	r2, r3, #7
 80035de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4422      	add	r2, r4
 80035e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035e8:	e106      	b.n	80037f8 <UART_SetConfig+0x4d8>
 80035ea:	bf00      	nop
 80035ec:	40011000 	.word	0x40011000
 80035f0:	40011400 	.word	0x40011400
 80035f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035fc:	2200      	movs	r2, #0
 80035fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003602:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003606:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800360a:	4642      	mov	r2, r8
 800360c:	464b      	mov	r3, r9
 800360e:	1891      	adds	r1, r2, r2
 8003610:	6239      	str	r1, [r7, #32]
 8003612:	415b      	adcs	r3, r3
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
 8003616:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800361a:	4641      	mov	r1, r8
 800361c:	1854      	adds	r4, r2, r1
 800361e:	4649      	mov	r1, r9
 8003620:	eb43 0501 	adc.w	r5, r3, r1
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	00eb      	lsls	r3, r5, #3
 800362e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003632:	00e2      	lsls	r2, r4, #3
 8003634:	4614      	mov	r4, r2
 8003636:	461d      	mov	r5, r3
 8003638:	4643      	mov	r3, r8
 800363a:	18e3      	adds	r3, r4, r3
 800363c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003640:	464b      	mov	r3, r9
 8003642:	eb45 0303 	adc.w	r3, r5, r3
 8003646:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003656:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003666:	4629      	mov	r1, r5
 8003668:	008b      	lsls	r3, r1, #2
 800366a:	4621      	mov	r1, r4
 800366c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003670:	4621      	mov	r1, r4
 8003672:	008a      	lsls	r2, r1, #2
 8003674:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003678:	f7fc fdc4 	bl	8000204 <__aeabi_uldivmod>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4b60      	ldr	r3, [pc, #384]	; (8003804 <UART_SetConfig+0x4e4>)
 8003682:	fba3 2302 	umull	r2, r3, r3, r2
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	011c      	lsls	r4, r3, #4
 800368a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800368e:	2200      	movs	r2, #0
 8003690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003694:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003698:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800369c:	4642      	mov	r2, r8
 800369e:	464b      	mov	r3, r9
 80036a0:	1891      	adds	r1, r2, r2
 80036a2:	61b9      	str	r1, [r7, #24]
 80036a4:	415b      	adcs	r3, r3
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ac:	4641      	mov	r1, r8
 80036ae:	1851      	adds	r1, r2, r1
 80036b0:	6139      	str	r1, [r7, #16]
 80036b2:	4649      	mov	r1, r9
 80036b4:	414b      	adcs	r3, r1
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036c4:	4659      	mov	r1, fp
 80036c6:	00cb      	lsls	r3, r1, #3
 80036c8:	4651      	mov	r1, sl
 80036ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ce:	4651      	mov	r1, sl
 80036d0:	00ca      	lsls	r2, r1, #3
 80036d2:	4610      	mov	r0, r2
 80036d4:	4619      	mov	r1, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	4642      	mov	r2, r8
 80036da:	189b      	adds	r3, r3, r2
 80036dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036e0:	464b      	mov	r3, r9
 80036e2:	460a      	mov	r2, r1
 80036e4:	eb42 0303 	adc.w	r3, r2, r3
 80036e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80036f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003704:	4649      	mov	r1, r9
 8003706:	008b      	lsls	r3, r1, #2
 8003708:	4641      	mov	r1, r8
 800370a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800370e:	4641      	mov	r1, r8
 8003710:	008a      	lsls	r2, r1, #2
 8003712:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003716:	f7fc fd75 	bl	8000204 <__aeabi_uldivmod>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4611      	mov	r1, r2
 8003720:	4b38      	ldr	r3, [pc, #224]	; (8003804 <UART_SetConfig+0x4e4>)
 8003722:	fba3 2301 	umull	r2, r3, r3, r1
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	2264      	movs	r2, #100	; 0x64
 800372a:	fb02 f303 	mul.w	r3, r2, r3
 800372e:	1acb      	subs	r3, r1, r3
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	3332      	adds	r3, #50	; 0x32
 8003734:	4a33      	ldr	r2, [pc, #204]	; (8003804 <UART_SetConfig+0x4e4>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003740:	441c      	add	r4, r3
 8003742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003746:	2200      	movs	r2, #0
 8003748:	673b      	str	r3, [r7, #112]	; 0x70
 800374a:	677a      	str	r2, [r7, #116]	; 0x74
 800374c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003750:	4642      	mov	r2, r8
 8003752:	464b      	mov	r3, r9
 8003754:	1891      	adds	r1, r2, r2
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	415b      	adcs	r3, r3
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003760:	4641      	mov	r1, r8
 8003762:	1851      	adds	r1, r2, r1
 8003764:	6039      	str	r1, [r7, #0]
 8003766:	4649      	mov	r1, r9
 8003768:	414b      	adcs	r3, r1
 800376a:	607b      	str	r3, [r7, #4]
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003778:	4659      	mov	r1, fp
 800377a:	00cb      	lsls	r3, r1, #3
 800377c:	4651      	mov	r1, sl
 800377e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003782:	4651      	mov	r1, sl
 8003784:	00ca      	lsls	r2, r1, #3
 8003786:	4610      	mov	r0, r2
 8003788:	4619      	mov	r1, r3
 800378a:	4603      	mov	r3, r0
 800378c:	4642      	mov	r2, r8
 800378e:	189b      	adds	r3, r3, r2
 8003790:	66bb      	str	r3, [r7, #104]	; 0x68
 8003792:	464b      	mov	r3, r9
 8003794:	460a      	mov	r2, r1
 8003796:	eb42 0303 	adc.w	r3, r2, r3
 800379a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	663b      	str	r3, [r7, #96]	; 0x60
 80037a6:	667a      	str	r2, [r7, #100]	; 0x64
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037b4:	4649      	mov	r1, r9
 80037b6:	008b      	lsls	r3, r1, #2
 80037b8:	4641      	mov	r1, r8
 80037ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037be:	4641      	mov	r1, r8
 80037c0:	008a      	lsls	r2, r1, #2
 80037c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037c6:	f7fc fd1d 	bl	8000204 <__aeabi_uldivmod>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <UART_SetConfig+0x4e4>)
 80037d0:	fba3 1302 	umull	r1, r3, r3, r2
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	2164      	movs	r1, #100	; 0x64
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	3332      	adds	r3, #50	; 0x32
 80037e2:	4a08      	ldr	r2, [pc, #32]	; (8003804 <UART_SetConfig+0x4e4>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	f003 020f 	and.w	r2, r3, #15
 80037ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4422      	add	r2, r4
 80037f6:	609a      	str	r2, [r3, #8]
}
 80037f8:	bf00      	nop
 80037fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037fe:	46bd      	mov	sp, r7
 8003800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003804:	51eb851f 	.word	0x51eb851f

08003808 <memset>:
 8003808:	4402      	add	r2, r0
 800380a:	4603      	mov	r3, r0
 800380c:	4293      	cmp	r3, r2
 800380e:	d100      	bne.n	8003812 <memset+0xa>
 8003810:	4770      	bx	lr
 8003812:	f803 1b01 	strb.w	r1, [r3], #1
 8003816:	e7f9      	b.n	800380c <memset+0x4>

08003818 <__libc_init_array>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	4d0d      	ldr	r5, [pc, #52]	; (8003850 <__libc_init_array+0x38>)
 800381c:	4c0d      	ldr	r4, [pc, #52]	; (8003854 <__libc_init_array+0x3c>)
 800381e:	1b64      	subs	r4, r4, r5
 8003820:	10a4      	asrs	r4, r4, #2
 8003822:	2600      	movs	r6, #0
 8003824:	42a6      	cmp	r6, r4
 8003826:	d109      	bne.n	800383c <__libc_init_array+0x24>
 8003828:	4d0b      	ldr	r5, [pc, #44]	; (8003858 <__libc_init_array+0x40>)
 800382a:	4c0c      	ldr	r4, [pc, #48]	; (800385c <__libc_init_array+0x44>)
 800382c:	f000 f818 	bl	8003860 <_init>
 8003830:	1b64      	subs	r4, r4, r5
 8003832:	10a4      	asrs	r4, r4, #2
 8003834:	2600      	movs	r6, #0
 8003836:	42a6      	cmp	r6, r4
 8003838:	d105      	bne.n	8003846 <__libc_init_array+0x2e>
 800383a:	bd70      	pop	{r4, r5, r6, pc}
 800383c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003840:	4798      	blx	r3
 8003842:	3601      	adds	r6, #1
 8003844:	e7ee      	b.n	8003824 <__libc_init_array+0xc>
 8003846:	f855 3b04 	ldr.w	r3, [r5], #4
 800384a:	4798      	blx	r3
 800384c:	3601      	adds	r6, #1
 800384e:	e7f2      	b.n	8003836 <__libc_init_array+0x1e>
 8003850:	080038ec 	.word	0x080038ec
 8003854:	080038ec 	.word	0x080038ec
 8003858:	080038ec 	.word	0x080038ec
 800385c:	080038f0 	.word	0x080038f0

08003860 <_init>:
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003862:	bf00      	nop
 8003864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003866:	bc08      	pop	{r3}
 8003868:	469e      	mov	lr, r3
 800386a:	4770      	bx	lr

0800386c <_fini>:
 800386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386e:	bf00      	nop
 8003870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003872:	bc08      	pop	{r3}
 8003874:	469e      	mov	lr, r3
 8003876:	4770      	bx	lr
